priority -49

snippet pu "public"
public ${0}
endsnippet

snippet po "protected"
protected ${0}
endsnippet

snippet pr "private"
private ${0}
endsnippet

snippet ab "abstract"
abstract ${0}
endsnippet

snippet st "static"
static ${0}
endsnippet

snippet cl "class"
class ${1:`!p snip.rv = snip.basename`} ${2/.+/extends /}${2}${2/.+/ /}${3/.+/implements /}${3}${3/.+/ /}{

	${0}

}
endsnippet

snippet cli "class implements"
class ${1:`!p snip.rv = snip.basename`} ${2/.+/implements /}${2}${2/.+/ /}{

	${0}

}
endsnippet

snippet en "enum"
enum ${1:`!p snip.rv = snip.basename`} ${2}${2/.+/ /}{
	${0}
}
endsnippet

snippet cen "complex enum"
enum ${1:`!p snip.rv = snip.basename`} {

	${0};

	private ${1///}(${2}) {
		${3}
	}

}
endsnippet

snippet ex "extends"
extends ${0}
endsnippet

snippet im "implements"
implements ${0}
endsnippet

snippet fin "final"
final ${0}
endsnippet

snippet fl "field"
private ${1:<type>} ${2:<name>};${0}
endsnippet

snippet ffl "final field"
private final ${1:<type>} ${2:<name>};${0}
endsnippet

snippet sfl "static field"
private static ${1:<type>} ${2:<name>};${0}
endsnippet

snippet sffl "static final field"
public static final ${1:<type>} ${2:<name>};${0}
endsnippet

snippet afl "assign field"
this.${1:<name>} = ${1///};${0}
endsnippet

snippet me "method"
${1:void} ${2:<name>}(${3}) ${4/.+/throws /}${4}${4/.+/ /}{
	${0}
}
endsnippet

snippet br "break"
break;${0}
endsnippet

snippet cas "case"
case ${1:<constant>}:
	${0}
	break;
endsnippet

snippet ifeq "if equals"
if(${1:<value>}.equals(${2:<constant>}))${0}
endsnippet

snippet iffl "if flag set"
if((${1:<flags>} & ${2:`!p snip.rv = snip.basename`}.${3:<constant>}) != 0)${0}
endsnippet

snippet ifnfl "if flag not set"
if((${1:<flags>} & ${2:`!p snip.rv = snip.basename`}.${3:<constant>}) == 0)${0}
endsnippet

snippet setfl "set flag"
${1:<flags>} |= ${2:`!p snip.rv = snip.basename`}.${3:<constant>};${0}
endsnippet

snippet ast "assign state"
state = State.${1:<state>};${0}
endsnippet

snippet imp "import"
import ${1:<symbol>};${0}
endsnippet

snippet impu "import java.util"
import java.util.${1:<symbol>};${0}
endsnippet

snippet impio "import java.io"
import java.io.${1:<symbol>};${0}
endsnippet

snippet th "throw"
throw new ${1:<type>}(${2});${0}
endsnippet

snippet sw "switch"
switch(${1:<value>}) {
	${0}
}
endsnippet

snippet pkg "package"
package ${1:`!v substitute(substitute(expand('%:h'), '^src/', '', ''), '/', '.', 'g')`};

${0}
endsnippet
