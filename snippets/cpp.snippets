priority -49

snippet ns "namespace"
namespace ${1} {

	${0}

}
endsnippet

snippet nns "nested namespace"
`!p
snip.rv = ''
for segment in snip.v.text.strip('\r\n \t').split('::'):
	snip.rv += snip.mkline('namespace ' + segment + ' ' + chr(123) + '\n')
`
	${0}

`!p snip.rv = '}' * len(snip.v.text.split('::'))`
endsnippet

snippet cl "class"
class ${1:`!p snip.rv = snip.basename or 'Foo'`} {

  private:
	${0}

  public:
	${1///}() {}
	${1///}(const ${1///}& ${1/.*/\l$0/}) {}

};
endsnippet

snippet tp "template"
template<${0}>
endsnippet

snippet pu "public"
  public:
	${0}
endsnippet

snippet po "protected"
  protected:
	${0}
endsnippet

snippet pr "private"
  private:
	${0}
endsnippet

snippet ty "typedef"
typedef ${1} ${2};
${0}
endsnippet

snippet tty "template typedef"
typedef ${1}<${2}> ${3};
${0}
endsnippet

snippet ttty "dependent template typedef"
typedef typename ${1}<${2}> ${3};
${0}
endsnippet

snippet grd "guard macro"
#ifndef ${1:`!v toupper(substitute(fnamemodify(getcwd(), ':t') . '_' . substitute(substitute(substitute(expand('%'), '^src/', '', ''), '/\%(src\|tools\)/', '/', 'g'), '^modules/', 'mod_', ''), '[^a-zA-Z0-9]\+', '_', 'g'))`}
#define ${1///}

${0}

#endif /* ${1///} */
endsnippet

snippet _api "API export macro"
${1:`!v toupper(fnamemodify(getcwd(), ':t'))`}_${2:`!v toupper(substitute(substitute(substitute(expand('%'), '^modules/', '', ''), '/.*', '', ''), '[^a-zA-Z0-9]\+', '', 'g'))`}_API ${0}
endsnippet

snippet _cn "Class name"
${1:`!v expand('%:t:r')`} ${0}
endsnippet
